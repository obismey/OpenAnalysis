<?xml version="1.0"?>
<doc>
<assembly>
<name>
Editor
</name>
</assembly>
<members>
<member name="M:Editor.Xna.ServiceContainer.AddService``1(``0)">
	<summary>
 Adds a new service to the collection.
 </summary>
</member><member name="M:Editor.Xna.ServiceContainer.GetService(System.Type)">
	<summary>
 Looks up the specified service.
 </summary>
</member><member name="T:Editor.Xna.ServiceContainer">
	<summary>
 Container class implements the IServiceProvider interface. This is used
 to pass shared services between different components, for instance the
 ContentManager uses it to locate the IGraphicsDeviceService implementation.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceService.#ctor(System.IntPtr,System.Int32,System.Int32)">
	<summary>
 Constructor is private, because this is a singleton class:
 client controls should use the public AddRef method instead.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceService.AddRef(System.IntPtr,System.Int32,System.Int32)">
	<summary>
 Gets a reference to the singleton instance.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceService.Release(System.Boolean)">
	<summary>
 Releases a reference to the singleton instance.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceService.ResetDevice(System.Int32,System.Int32)">
	<summary>
 Resets the graphics device to whichever is bigger out of the specified
 resolution or its current size. This behavior means the device will
 demand-grow to the largest of all its GraphicsDeviceControl clients.
 </summary>
</member><member name="P:Editor.Xna.GraphicsDeviceService.GraphicsDevice">
	<summary>
 Gets the current graphics device.
 </summary>
</member><member name="T:Editor.Xna.GraphicsDeviceService">
	<summary>
 Helper class responsible for creating and managing the GraphicsDevice.
 All GraphicsDeviceControl instances share the same GraphicsDeviceService,
 so even though there can be many controls, there will only ever be a single
 underlying GraphicsDevice. This implements the standard IGraphicsDeviceService
 interface, which provides notification events for when the device is reset
 or disposed.
 </summary>
</member><member name="P:Editor.Xna.GraphicsDeviceControl.GraphicsDevice">
	<summary>
 Gets a GraphicsDevice that can be used to draw onto this control.
 </summary>
</member><member name="P:Editor.Xna.GraphicsDeviceControl.Services">
	<summary>
 Gets an IServiceProvider containing our IGraphicsDeviceService.
 This can be used with components such as the ContentManager,
 which use this service to look up the GraphicsDevice.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.OnCreateControl">
	<summary>
 Initializes the control.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.Dispose(System.Boolean)">
	<summary>
 Disposes the control.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
	<summary>
 Redraws the control in response to a WinForms paint message.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.BeginDraw">
	<summary>
 Attempts to begin drawing the control. Returns an error message string
 if this was not possible, which can happen if the graphics device is
 lost, or if we are running inside the Form designer.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.EndDraw">
	<summary>
 Ends drawing the control. This is called after derived classes
 have finished their Draw method, and is responsible for presenting
 the finished image onto the screen, using the appropriate WinForms
 control handle to make sure it shows up in the right place.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.HandleDeviceReset">
	<summary>
 Helper used by BeginDraw. This checks the graphics device status,
 making sure it is big enough for drawing the current control, and
 that the device is not lost. Returns an error string if the device
 could not be reset.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.PaintUsingSystemDrawing(System.Drawing.Graphics,System.String)">
	<summary>
 If we do not have a valid graphics device (for instance if the device
 is lost, or if we are running inside the Form designer), we must use
 regular System.Drawing method to display a status message.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
	<summary>
 Ignores WinForms paint-background messages. The default implementation
 would clear the control to the current background color, causing
 flickering when our OnPaint implementation then immediately draws some
 other color over the top using the XNA Framework GraphicsDevice.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.Initialize">
	<summary>
 Derived classes override this to initialize their drawing code.
 </summary>
</member><member name="M:Editor.Xna.GraphicsDeviceControl.Draw">
	<summary>
 Derived classes override this to draw themselves using the GraphicsDevice.
 </summary>
</member><member name="T:Editor.Xna.GraphicsDeviceControl">
	<summary>
 Custom control uses the XNA Framework GraphicsDevice to render onto
 a Windows Form. Derived classes can override the Initialize and Draw
 methods to add their own drawing code.
 </summary>
</member>
</members>
</doc>