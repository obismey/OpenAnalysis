<?xml version="1.0"?>
<doc>
<assembly>
<name>
Design
</name>
</assembly>
<members>
<member name="M:Design.Xna.ServiceContainer.AddService``1(``0)">
	<summary>
 Adds a new service to the collection.
 </summary>
</member><member name="M:Design.Xna.ServiceContainer.GetService(System.Type)">
	<summary>
 Looks up the specified service.
 </summary>
</member><member name="T:Design.Xna.ServiceContainer">
	<summary>
 Container class implements the IServiceProvider interface. This is used
 to pass shared services between different components, for instance the
 ContentManager uses it to locate the IGraphicsDeviceService implementation.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceService.#ctor(System.IntPtr,System.Int32,System.Int32)">
	<summary>
 Constructor is private, because this is a singleton class:
 client controls should use the public AddRef method instead.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceService.AddRef(System.IntPtr,System.Int32,System.Int32)">
	<summary>
 Gets a reference to the singleton instance.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceService.Release(System.Boolean)">
	<summary>
 Releases a reference to the singleton instance.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceService.ResetDevice(System.Int32,System.Int32)">
	<summary>
 Resets the graphics device to whichever is bigger out of the specified
 resolution or its current size. This behavior means the device will
 demand-grow to the largest of all its GraphicsDeviceControl clients.
 </summary>
</member><member name="P:Design.Xna.GraphicsDeviceService.GraphicsDevice">
	<summary>
 Gets the current graphics device.
 </summary>
</member><member name="T:Design.Xna.GraphicsDeviceService">
	<summary>
 Helper class responsible for creating and managing the GraphicsDevice.
 All GraphicsDeviceControl instances share the same GraphicsDeviceService,
 so even though there can be many controls, there will only ever be a single
 underlying GraphicsDevice. This implements the standard IGraphicsDeviceService
 interface, which provides notification events for when the device is reset
 or disposed.
 </summary>
</member><member name="M:Design.ErrorLogger.ErrorRaised(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
	<summary>
 Handles error notification events by storing the error message string.
 </summary>
</member><member name="P:Design.ErrorLogger.Errors">
	<summary>
 Gets a list of all the errors that have been logged.
 </summary>
</member><member name="M:Design.ErrorLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
	<summary>
 Initializes the custom logger, hooking the ErrorRaised notification event.
 </summary>
</member><member name="M:Design.ErrorLogger.Shutdown">
	<summary>
 Shuts down the custom logger.
 </summary>
</member><member name="P:Design.ErrorLogger.ILogger_Parameters">
	<summary>
 Implement the ILogger.Parameters property.
 </summary>
</member><member name="P:Design.ErrorLogger.ILogger_Verbosity">
	<summary>
 Implement the ILogger.Verbosity property.
 </summary>
</member><member name="T:Design.ErrorLogger">
	<summary>
 Custom implementation of the MSBuild ILogger interface records
 content build errors so we can later display them to the user.
 </summary>
</member><member name="P:Design.Xna.GraphicsDeviceControl.GraphicsDevice">
	<summary>
 Gets a GraphicsDevice that can be used to draw onto this control.
 </summary>
</member><member name="P:Design.Xna.GraphicsDeviceControl.Services">
	<summary>
 Gets an IServiceProvider containing our IGraphicsDeviceService.
 This can be used with components such as the ContentManager,
 which use this service to look up the GraphicsDevice.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.OnCreateControl">
	<summary>
 Initializes the control.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.Dispose(System.Boolean)">
	<summary>
 Disposes the control.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
	<summary>
 Redraws the control in response to a WinForms paint message.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.BeginDraw">
	<summary>
 Attempts to begin drawing the control. Returns an error message string
 if this was not possible, which can happen if the graphics device is
 lost, or if we are running inside the Form designer.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.EndDraw">
	<summary>
 Ends drawing the control. This is called after derived classes
 have finished their Draw method, and is responsible for presenting
 the finished image onto the screen, using the appropriate WinForms
 control handle to make sure it shows up in the right place.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.HandleDeviceReset">
	<summary>
 Helper used by BeginDraw. This checks the graphics device status,
 making sure it is big enough for drawing the current control, and
 that the device is not lost. Returns an error string if the device
 could not be reset.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.PaintUsingSystemDrawing(System.Drawing.Graphics,System.String)">
	<summary>
 If we do not have a valid graphics device (for instance if the device
 is lost, or if we are running inside the Form designer), we must use
 regular System.Drawing method to display a status message.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
	<summary>
 Ignores WinForms paint-background messages. The default implementation
 would clear the control to the current background color, causing
 flickering when our OnPaint implementation then immediately draws some
 other color over the top using the XNA Framework GraphicsDevice.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.Initialize">
	<summary>
 Derived classes override this to initialize their drawing code.
 </summary>
</member><member name="M:Design.Xna.GraphicsDeviceControl.Draw">
	<summary>
 Derived classes override this to draw themselves using the GraphicsDevice.
 </summary>
</member><member name="T:Design.Xna.GraphicsDeviceControl">
	<summary>
 Custom control uses the XNA Framework GraphicsDevice to render onto
 a Windows Form. Derived classes can override the Initialize and Draw
 methods to add their own drawing code.
 </summary>
</member><member name="P:Design.ContentBuilder.OutputDirectory">
	<summary>
 Gets the output directory, which will contain the generated .xnb files.
 </summary>
</member><member name="M:Design.ContentBuilder.#ctor">
	<summary>
 Creates a new content builder.
 </summary>
</member><member name="M:Design.ContentBuilder.Finalize">
	<summary>
 Finalizes the content builder.
 </summary>
</member><member name="M:Design.ContentBuilder.Dispose">
	<summary>
 Disposes the content builder when it is no longer required.
 </summary>
</member><member name="M:Design.ContentBuilder.Dispose(System.Boolean)">
	<summary>
 Implements the standard .NET IDisposable pattern.
 </summary>
</member><member name="M:Design.ContentBuilder.CreateBuildProject">
	<summary>
 Creates a temporary MSBuild content project in memory.
 </summary>
</member><member name="M:Design.ContentBuilder.Add(System.String,System.String,System.String,System.String)">
	<summary>
 Adds a new content file to the MSBuild project. The importer and
 processor are optional: if you leave the importer null, it will
 be autodetected based on the file extension, and if you leave the
 processor null, data will be passed through without any processing.
 </summary>
</member><member name="M:Design.ContentBuilder.Clear">
	<summary>
 Removes all content files from the MSBuild project.
 </summary>
</member><member name="M:Design.ContentBuilder.Build">
	<summary>
 Builds all the content files which have been added to the project,
 dynamically creating .xnb files in the OutputDirectory.
 Returns an error message if the build fails.
 </summary>
</member><member name="M:Design.ContentBuilder.CreateTempDirectory">
	<summary>
 Creates a temporary directory in which to build content.
 </summary>
</member><member name="M:Design.ContentBuilder.DeleteTempDirectory">
	<summary>
 Deletes our temporary directory when we are finished with it.
 </summary>
</member><member name="M:Design.ContentBuilder.PurgeStaleTempDirectories">
	<summary>
 Ideally, we want to delete our temp directory when we are finished using
 it. The DeleteTempDirectory method (called by whichever happens first out
 of Dispose or our finalizer) does exactly that. Trouble is, sometimes
 these cleanup methods may never execute. For instance if the program
 crashes, or is halted using the debugger, we never get a chance to do
 our deleting. The next time we start up, this method checks for any temp
 directories that were left over by previous runs which failed to shut
 down cleanly. This makes sure these orphaned directories will not just
 be left lying around forever.
 </summary>
</member><member name="T:Design.ContentBuilder">
	<summary>
 This class wraps the MSBuild functionality needed to build XNA Framework
 content dynamically at runtime. It creates a temporary MSBuild project
 in memory, and adds whatever content files you choose to this project.
 It then builds the project, which will create compiled .xnb content files
 in a temporary directory. After the build finishes, you can use a regular
 ContentManager to load these temporary .xnb files in the usual way.
 </summary>
</member>
</members>
</doc>